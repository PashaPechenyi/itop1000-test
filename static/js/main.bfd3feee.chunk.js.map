{"version":3,"sources":["App/components/ResetButton.js","App/components/StartButton.js","App/components/TimeBlock.js","App/components/WaitButton.js","App/Stopwatch.js","index.js"],"names":["ResetButton","resetActiveDate","resetBeforeTime","className","onClick","defaultProps","StartButton","setActiveDate","activeDate","dateNow","Date","TimeBlock","beforeTime","useState","activeTime","setActiveTime","changeActiveTime","newActiveTime","Math","floor","useEffect","timerId","setTimeout","recountActiveTime","differenceDate","getTime","clearTimeout","timeTitle","useMemo","timeHours","slice","timeMinutes","timeSeconds","WaitButton","changeBeforeTime","lastClickTimespamp","setLastClickTimespamp","dateNowTimespamp","Stopwatch","useCallback","setBeforeTime","time","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bfd3feee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ResetButton({ resetActiveDate, resetBeforeTime }) {\r\n  const onClickFunc = () => {\r\n    resetActiveDate();\r\n    resetBeforeTime();\r\n  };\r\n\r\n  return (\r\n    <button className=\"stopwatch__button\" onClick={onClickFunc}>\r\n      Reset\r\n    </button>\r\n  );\r\n}\r\n\r\nResetButton.propTypes = {\r\n  resetBeforeTime: PropTypes.func,\r\n  resetActiveDate: PropTypes.func,\r\n};\r\n\r\nResetButton.defaultProps = {\r\n  resetBeforeTime: () => {},\r\n  resetActiveDate: () => {},\r\n};\r\n\r\nexport default ResetButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction StartButton({\r\n  setActiveDate,\r\n  activeDate,\r\n  resetBeforeTime,\r\n  resetActiveDate,\r\n}) {\r\n  const onClickFunc = () => {\r\n    // Если секундомер активен в данный момент\r\n    if (activeDate) {\r\n      resetActiveDate();\r\n      resetBeforeTime();\r\n      return;\r\n    }\r\n\r\n    // В других случаях запускаем.возобновляем его работу\r\n    const dateNow = new Date();\r\n    setActiveDate(dateNow);\r\n  };\r\n\r\n  return (\r\n    <button className=\"stopwatch__button\" onClick={onClickFunc}>\r\n      {activeDate ? \"Stop\" : \"Start\"}{\" \"}\r\n    </button>\r\n  );\r\n}\r\n\r\nStartButton.propTypes = {\r\n  setActiveDate: PropTypes.func,\r\n  resetBeforeTime: PropTypes.func,\r\n  resetActiveDate: PropTypes.func,\r\n};\r\n\r\nStartButton.defaultProps = {\r\n  setActiveDate: () => {},\r\n  resetBeforeTime: () => {},\r\n  resetActiveDate: () => {},\r\n  activeDate: \"\",\r\n};\r\n\r\nexport default StartButton;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction TimeBlock({ beforeTime, activeDate }) {\r\n  // время для вывода в секундах\r\n  const [activeTime, setActiveTime] = useState(0),\r\n    changeActiveTime = (newActiveTime) => {\r\n      setActiveTime(Math.floor(newActiveTime / 1000));\r\n    };\r\n  useEffect(() => {\r\n    // Если секундомер не активен и не в режиме Wait обнуляем дату для вывода\r\n    if (!activeDate && beforeTime) {\r\n      changeActiveTime(beforeTime);\r\n      return;\r\n    } else if (!activeDate && !beforeTime) {\r\n      setActiveTime(0);\r\n      return;\r\n    }\r\n\r\n    // delate setTimeout при первом подсчете времени\r\n    const firstDelate = 1000 - (beforeTime % 1000);\r\n    // Каждую секунду измняем дату для вывода\r\n    let timerId = setTimeout(function recountActiveTime() {\r\n      const dateNow = new Date(),\r\n        differenceDate = dateNow.getTime() - activeDate.getTime(),\r\n        newActiveTime = differenceDate + beforeTime;\r\n\r\n      changeActiveTime(newActiveTime);\r\n\r\n      timerId = setTimeout(recountActiveTime, 1000); // (*)\r\n    }, firstDelate);\r\n\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n  }, [beforeTime, activeDate]);\r\n\r\n  const timeTitle = useMemo(() => {\r\n    const timeHours = (\"00\" + Math.floor(activeTime / 3600)).slice(-2),\r\n      timeMinutes = (\"00\" + Math.floor((activeTime % 3600) / 60)).slice(-2),\r\n      timeSeconds = (\"00\" + Math.floor(activeTime % 60)).slice(-2),\r\n      timeTitle = `${timeHours}:${timeMinutes}:${timeSeconds}`;\r\n\r\n    return timeTitle;\r\n  }, [activeTime]);\r\n\r\n  return <div>{timeTitle}</div>;\r\n}\r\n\r\nTimeBlock.propTypes = {\r\n  beforeTime: PropTypes.number,\r\n};\r\n\r\nTimeBlock.defaultProps = {\r\n  beforeTime: 0,\r\n  activeDate: \"\",\r\n};\r\nexport default TimeBlock;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction WaitButton({ activeDate, changeBeforeTime, resetActiveDate }) {\r\n  const [lastClickTimespamp, setLastClickTimespamp] = useState(null);\r\n  const onClickFunc = () => {\r\n    if (!activeDate) return;\r\n\r\n    const dateNowTimespamp = new Date().getTime();\r\n\r\n    // Если кнопка была нажата больше чем 300мс назад\r\n    // обнуляем время и выходим из функции\r\n    if (!lastClickTimespamp || dateNowTimespamp - lastClickTimespamp > 300) {\r\n      setLastClickTimespamp(dateNowTimespamp);\r\n\r\n      return;\r\n    }\r\n\r\n    const differenceDate = Math.floor(dateNowTimespamp - activeDate.getTime());\r\n\r\n    setLastClickTimespamp(null);\r\n    changeBeforeTime(differenceDate);\r\n    resetActiveDate();\r\n  };\r\n\r\n  return (\r\n    <button className=\"stopwatch__button\" onClick={onClickFunc}>\r\n      Wait\r\n    </button>\r\n  );\r\n}\r\n\r\nWaitButton.propTypes = {\r\n  changeBeforeTime: PropTypes.func,\r\n  resetActiveDate: PropTypes.func,\r\n};\r\n\r\nWaitButton.defaultProps = {\r\n  changeBeforeTime: () => {},\r\n  resetActiveDate: () => {},\r\n  activeDate: \"\",\r\n};\r\n\r\nexport default WaitButton;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport ResetButton from \"./components/ResetButton\";\r\nimport StartButton from \"./components/StartButton\";\r\nimport TimeBlock from \"./components/TimeBlock\";\r\nimport WaitButton from \"./components/WaitButton\";\r\n\r\nconst Stopwatch = () => {\r\n  // дата начала отсчета (state пустой когда таймер неактивен в\r\n  // противном случае будет содержать дату начала отсчета)\r\n  const [activeDate, setActiveDate] = useState(\"\"),\r\n    resetActiveDate = useCallback(() => {\r\n      setActiveDate(\"\");\r\n    }, []);\r\n  // время в 1/1000 секунды при остановке таймера\r\n  const [beforeTime, setBeforeTime] = useState(0),\r\n    resetBeforeTime = useCallback(() => {\r\n      setBeforeTime(0);\r\n    }, []),\r\n    changeBeforeTime = useCallback(\r\n      (time) => {\r\n        setBeforeTime(beforeTime + time);\r\n      },\r\n      [beforeTime]\r\n    );\r\n\r\n  return (\r\n    <div className=\"stopwatch\">\r\n      <div className=\"stopwatch__time-block\">\r\n        <TimeBlock activeDate={activeDate} beforeTime={beforeTime} />\r\n      </div>\r\n\r\n      <div className=\"stopwatch__buttons-block\">\r\n        <StartButton\r\n          setActiveDate={setActiveDate}\r\n          resetActiveDate={resetActiveDate}\r\n          activeDate={activeDate}\r\n          resetBeforeTime={resetBeforeTime}\r\n        />\r\n        <WaitButton\r\n          activeDate={activeDate}\r\n          resetActiveDate={resetActiveDate}\r\n          changeBeforeTime={changeBeforeTime}\r\n        />\r\n        <ResetButton\r\n          resetActiveDate={resetActiveDate}\r\n          resetBeforeTime={resetBeforeTime}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Stopwatch from \"./App/Stopwatch\";\r\nimport \"./index.scss\";\r\nimport \"./styles/reset.css\";\r\n\r\nReactDOM.render(\r\n  <Stopwatch />,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}